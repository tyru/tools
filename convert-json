#!/usr/bin/env perl
use common::sense;

use Getopt::Long qw(:config gnu_compat no_bundling no_ignore_case);
use Pod::Usage;
use Perl6::Slurp;
use JSON ();
use Data::Dump qw(dump);


sub usage () {
    pod2usage(-verbose => 1);
}


my $needhelp;
my $do_load = 1;
my $expression;
GetOptions(
    'h|help' => \$needhelp,
    'd|dump' => sub { $do_load = 0 },
    'l|load' => sub { $do_load = 1 },
    'e|expression=s' => sub {
        $expression .= "\n$_[1]";
    },
) or usage;
usage if $needhelp;

if ($do_load) {
    $expression //= do {
        usage if @ARGV == 0;
        my $filename = shift;
        unless (-f $filename) {
            warn "$filename: No such a file\n";
            usage;
        }
        scalar slurp $filename;
    };
    # expression must ends with newline.
    $expression .= "\n";
    my $structure = eval {
        JSON::decode_json $expression;
    };
    die "error occurred with an expression '$expression':\n$@\n" if $@;
    say dump $structure;
}
else {
    my $structure = eval $expression;
    die "error occurred with an expression '$expression':\n$@\n" if $@;
    my $json = eval { JSON::encode_json $structure };
    die "error occurred with an expression '$expression':\n$@\n" if $@;
    say $json;
}




__END__

=head1 NAME

    convert-json - NO DESCRIPTION YET


=head1 SYNOPSIS

    $ convert-json -e '{"foo": 1, "bar": 2}' # prints "{foo => 1, bar => 2}"

=head1 OPTIONS

=over

=item -h, --help

Show this help.

=back


=head1 AUTHOR

tyru <tyru.exe@gmail.com>
